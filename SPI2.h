/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : SPI2.h
**     Project   : Project
**     Processor : MC9S12XEP100MAG
**     Component : SynchroMaster
**     Version   : Component 02.341, Driver 01.20, CPU db: 3.00.036
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2016/8/14, 15:02
**     Abstract  :
**         This component "SynchroMaster" implements MASTER part of synchronous
**         serial master-slave communication.
**     Settings  :
**         Synchro type                : MASTER
**
**         Serial channel              : SPI2
**
**         Protocol
**             Init baud rate          : 1us
**             Clock edge              : rising
**             Width                   : 8 bits
**             Empty character         : 0
**             Empty char. on input    : RECEIVED
**
**         Registers
**             Input buffer            : SPI2DR    [$00FC]
**             Output buffer           : SPI2DR    [$00FC]
**             Control register        : SPI2CR1   [$00F8]
**             Mode register           : SPI2CR2   [$00F9]
**             Baud setting reg.       : SPI2BR    [$00FA]
**
**             Priority                : 
**
**             Priority                : 
**
**         Used pins                   :
**         ----------------------------------------------------------
**              Function    | On package |    Name
**         ----------------------------------------------------------
**               Input      |     47     |  PH4_KWH4_MISO2_RxD4
**               Output     |     46     |  PH5_KWH5_MOSI2_TxD4
**               Clock      |     45     |  PH6_KWH6_SCK2_RxD5
**         ----------------------------------------------------------
**
**     Contents  :
**         RecvChar        - byte SPI2_RecvChar(SPI2_TComData *Chr);
**         SendChar        - byte SPI2_SendChar(SPI2_TComData Chr);
**         GetCharsInRxBuf - word SPI2_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word SPI2_GetCharsInTxBuf(void);
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __SPI2
#define __SPI2

/* MODULE SPI2. */

#include "Cpu.h"

#pragma DATA_SEG SPI2_DATA             /* Select data segment "SPI2_DATA" */
#pragma CODE_SEG SPI2_CODE


#define SPI2_EOF 0x00U                 /* Value of the empty character defined in the <a href="SynchroMasterProperties.html#EOF">Empty character</a> property. */
#ifndef __BWUserType_SPI2_TComData
#define __BWUserType_SPI2_TComData
  typedef byte SPI2_TComData;          /* User type for communication. */
#endif

#ifndef __BWUserType_SPI2_TError
#define __BWUserType_SPI2_TError
/*lint -save  -esym(960,18.4) Disable MISRA rule (18.4) checking. */
  typedef union {
    byte err;
    struct {
      unsigned int OverRun  : 1;   /* OverRun error flag - the data overflow on the input has been detected. Both hardware detection (if supported) and software detection (when the value of Input buffer size property is 0) is used. */
      unsigned int RxBufOvf : 1;   /* Rx buffer full error flag - the input circular buffer defined by the Input buffer size property has overrun. */
      unsigned int FaultErr : 1;   /* Fault mode error flag - only if supported by hardware */
    }errName;
  } SPI2_TError;                       /* Error flags. For languages which don't support bit access is byte access only to error flags possible.  */
/*lint -restore  +esym(961,18.4) Enable MISRA rule (18.4) checking. */
#endif




byte SPI2_RecvChar(SPI2_TComData *Chr);
/*
** ===================================================================
**     Method      :  SPI2_RecvChar (component SynchroMaster)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data). 
**         For information about SW overrun behavior please see
**         <General info page>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - A pointer to the received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK - The valid data is received.
**                           ERR_SPEED - This device does not work in
**                           the active speed mode.
**                           ERR_RXEMPTY - No data in receiver.
**                           ERR_OVERRUN - Overrun error was detected
**                           from the last char or block received. In
**                           polling mode, this error code is returned
**                           only when the hardware supports detection
**                           of the overrun error. If interrupt service
**                           is enabled, and input buffer allocated by
**                           the component is full, the component
**                           behaviour depends on <Input buffer size>
**                           property : if property is 0, last received
**                           data-word is preserved (and previous is
**                           overwritten), if property is greater than 0,
**                           new received data-word are ignored.
**                           ERR_FAULT - Fault error was detected from
**                           the last char or block received. In the
**                           polling mode the ERR_FAULT is return until
**                           the user clear the fault flag bit, but in
**                           the interrupt mode ERR_FAULT is returned
**                           only once after the fault error occured.
**                           This error is supported only on the CPUs
**                           supports the faul mode function - where
**                           <Fault mode> property is available.
** ===================================================================
*/

byte SPI2_SendChar(SPI2_TComData Chr);
/*
** ===================================================================
**     Method      :  SPI2_SendChar (component SynchroMaster)
**
**     Description :
**         Sends one character to the channel.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled (only if
**                           output DMA is supported and enabled)
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

#define SPI2_GetCharsInRxBuf() ((word)(SPI2SR_SPIF)) /* Return number of chars in the receive buffer */
/*
** ===================================================================
**     Method      :  SPI2_GetCharsInRxBuf (component SynchroMaster)
**
**     Description :
**         Returns the number of characters in the input buffer.
**         Note: If the Interrupt service is disabled, and the Ignore
**         empty character is set to yes, and a character has been
**         received, then this method returns 1 although it was an
**         empty character.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the input buffer.
** ===================================================================
*/

#define SPI2_GetCharsInTxBuf() (SPI2SR_SPTEF ? (word)0U : (word)1U) /* Return number of chars in the transmit buffer */
/*
** ===================================================================
**     Method      :  SPI2_GetCharsInTxBuf (component SynchroMaster)
**
**     Description :
**         Returns the number of characters in the output buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the output buffer.
** ===================================================================
*/

void SPI2_Init(void);
/*
** ===================================================================
**     Method      :  SPI2_Init (component SynchroMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT
#pragma DATA_SEG DEFAULT               /* Select data segment "DEFAULT" */

/* END SPI2. */

#endif /* ifndef __SPI2 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.05 [04.46]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
