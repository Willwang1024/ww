/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : Flash.h
**     Project   : Project
**     Processor : MC9S12XEP100MAG
**     Component : IntFLASH
**     Version   : Component 02.367, Driver 02.17, CPU db: 3.00.036
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2016/8/14, 15:02
**     Abstract  :
**         This component "IntFLASH" implements an access to internal FLASH.
**         The component support reading/writing data into FLASH, erasing of
**         selected sector.
**         The component supports events if the write interrupt is supported.
**         The component supports following modes of write operations:
**           - Write - writing without any test.
**           - Destructive write - sector is erased if necessary.
**           - Safe write - user event is invoked to save and resore data
**                          from the current sector.
**         The component requires on-chip FLASH memory (not used/allocated by
**         other components).
**     Settings  :
**         Total FLASH memory size       : 1024KB
**         Number of FLASH memory blocks : 5
**           Sector size                 : 0x0400
**         Interrupt service             : Disabled
**         Write method                  : Safe write (with save & erase)
**         Buffer Type                   : Implemented by the component
**         Wait in RAM                   : yes
**     Contents  :
**         SetProtection - byte Flash_SetProtection(bool ProtectType, byte ProtectHigh, byte ProtectLow,...
**         SetByteFlash  - byte Flash_SetByteFlash(Flash_TAddress Addr, byte Data);
**         SetWordFlash  - byte Flash_SetWordFlash(Flash_TAddress Addr, word Data);
**         DataPtr2Addr  - Flash_TAddress Flash_DataPtr2Addr(void* Addr);
**         FuncPtr2Addr  - Flash_TAddress Flash_FuncPtr2Addr(void(*Addr)());
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/* MODULE Flash. */


#ifndef __Flash
#define __Flash

/* MODULE Flash. */

#include "Cpu.h"

#pragma DATA_SEG Flash_DATA            /* Select data segment "Flash_DATA" */
#pragma CODE_SEG Flash_CODE


/* Flash area 0 start address (in the format used by component methods). */
#define Flash_AREA_0_START              (0x00700000UL)
/* Flash area 0 size (in bytes). */
#define Flash_AREA_0_SIZE               (0x00100000UL)
/* Flash area 0 last address (in the format used by component methods). */
#define Flash_AREA_0_END                (0x007FFFFFUL)
/* Flash area 0 sector size: minimal erasable unit (in bytes). */
#define Flash_AREA_0_SECTOR_SIZE        (0x0400U)
/* Number of flash memory areas. */
#define Flash_AREA_COUNT                (0x01U)

/* Flash area sector size valid for all areas: minimal erasable unit (in bytes). */
#define Flash_AREA_SECTOR_SIZE          (0x0400U)
/* Size of programming phrase, i.e. number of bytes that must be programmed at once */
#define Flash_PROGRAMMING_PHRASE        (0x08U)
/* TRUE if the component setting allows rewrite of already programmed flash memory location (only clear those bits that in 1) without destruction of the value in surrounding addresses by sector erase. */
#define Flash_ALLOW_CLEAR               (TRUE)

#ifndef __BWUserType_Flash_TAddress
#define __BWUserType_Flash_TAddress
  typedef dword Flash_TAddress;        /* component type for address to the FLASH. Address is 24-bit GLOBAL address*/
#endif
#ifndef __BWUserType_Flash_TDataAddress
#define __BWUserType_Flash_TDataAddress
  typedef byte *Flash_TDataAddress;    /* component type for pointer to data. Data are either source, when writting a block to flash, or output, when reading a block from flash */
#endif

#define Flash_DummyData    (0x10U)     /* This number is used as data word for erase algorithm */

#define Flash_SetProtection(ProtectType,ProtectHigh,ProtectLow,Block) Flash_SetProtection_(ProtectType,ProtectHigh,ProtectLow)
byte Flash_SetProtection_(bool ProtectType,byte ProtectHigh,byte ProtectLow);
/*
** ===================================================================
**     Method      :  Flash_SetProtection (component IntFLASH)
**
**     Description :
**         Method allows write to protection register. Please see
**         Flash Block User Guide.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ProtectType     - Possible values: 0 or 1.
**                           Depend on CPU type. Two sense are
**                           possible.
**                           First:
**                           - 0 = whole Flash array is protected. In
**                           this case other parameters are don't
**                           care.
**                           - 1 = protection size depend on
**                           ProtectHigh and ProtectLow parameters.
**                           Second:
**                           - 0 = ProtectHigh and ProtectLow
**                           parameters define range to by protected .
**                           - 1 = ProtectHigh and ProtectLow
**                           parameters define range to by
**                           unprotected .
**         ProtectHigh     - Flash higher address
**                           range protection. Possible values:
**                           - 0 - 3 - defines range (size of range
**                           depend on CPU type) , 4 - Protection
**                           disabled
**         ProtectLow      - Flash lower address
**                           range protection. Possible values:
**                           - 0 - 3 - defines range (size of range
**                           depend on CPU type) , 4 - Protection
**                           disabled
**         Block           - Flash block number. Number of
**                           blocks depend on CPU type. If CPU has
**                           only one block, the value is don't care.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Requested value not
**                           operation is not available
**                           - ERR_RANGE - Value is out of range
**                           - ERR_VALUE - Parameter of incorrect
**                           value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/


void Flash_Init(void);
/*
** ===================================================================
**     Method      :  Flash_Init (component IntFLASH)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte Flash_SetByteFlash(Flash_TAddress Addr,byte Data);
/*
** ===================================================================
**     Method      :  Flash_SetByteFlash (component IntFLASH)
**
**     Description :
**         Write byte to address in FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to FLASH.
**         Data            - Data to write.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_RANGE - Address is out of range
**                           - ERR_VALUE - Read value is not equal to
**                           written value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/

byte Flash_SetWordFlash(Flash_TAddress Addr,word Data);
/*
** ===================================================================
**     Method      :  Flash_SetWordFlash (component IntFLASH)
**
**     Description :
**         Write word to address in FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to FLASH.
**         Data            - Data to write.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_RANGE - Address is out of range
**                           - ERR_VALUE - Read value is not equal to
**                           written value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/


Flash_TAddress Flash_DataPtr2Addr(const void *far Addr);
/*
** ===================================================================
**     Method      :  Flash_DataPtr2Addr (component IntFLASH)
**
**     Description :
**         This method converts data pointer to format of a component's
**         method address parameter. Generally a data pointer format is
**         different from format of a method Addr parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Addr            - Data pointer.
**     Returns     :
**         ---             - Address in the format used in the
**                           component methods.
** ===================================================================
*/

Flash_TAddress Flash_FuncPtr2Addr(void(*far Addr)());
/*
** ===================================================================
**     Method      :  Flash_FuncPtr2Addr (component IntFLASH)
**
**     Description :
**         This method converts function pointer to format of a
**         component's method address parameter. Generally a function
**         pointer format is different from format of a method Addr
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Addr            - Function pointer.
**     Returns     :
**         ---             - Address in the format used in the
**                           component methods.
** ===================================================================
*/


#pragma CODE_SEG DEFAULT
#pragma DATA_SEG DEFAULT               /* Select data segment "DEFAULT" */

/* END Flash. */

#endif /* ifndef __Flash */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.05 [04.46]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
