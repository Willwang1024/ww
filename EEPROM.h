/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : EEPROM.h
**     Project   : Project
**     Processor : MC9S12XEP100MAG
**     Component : IntEEPROM
**     Version   : Component 02.200, Driver 01.25, CPU db: 3.00.036
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2016/8/14, 15:02
**     Abstract  :
**         This device "IntEEPROM" implements internal EEPROM
**     Comment   :
**         The EEPROM array is organized as rows of word (2 bytes), the EEPROM block's
**         erase sector size is 2 rows (2 words). Therefore it is preferable
**         to use word aligned data for writting - methods SetWord and SetLong -
**         with word aligned address.
**         Driver expects that all security options of EEPROM are disabled.
**         If some security option is enabled methods performing write
**         operation (such as SetWord) can return error.
**     Settings  :
**         EEPROM size                 : 32768 byte
**         Initialization:
**              Wait in methods        : Enabled
**              EEPROM clock           : High: 1000 kHz
**
**     Contents  :
**         SetByte - byte EEPROM_SetByte(EEPROM_TAddress Addr, byte Data);
**         GetByte - byte EEPROM_GetByte(EEPROM_TAddress Addr, byte *Data);
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __EEPROM
#define __EEPROM

/* MODULE EEPROM. */

#include "Cpu.h"


#ifndef __BWUserType_EEPROM_TAddress
#define __BWUserType_EEPROM_TAddress
  /* User type for addressing of the EEPROM. Actual type depends on the CPU family. */
  typedef far word * far EEPROM_TAddress; /* Type of address to the EEPROM */
#endif

#pragma CODE_SEG EEPROM_CODE


/* EEPROM area start address (in the format used by component methods). */
#define EEPROM_AREA_START               ((EEPROM_TAddress)0x00100000UL)
#define EEPROM_AREA_START_INT           (0x00100000UL)
/* EEPROM area last address (in the format used by component methods). */
#define EEPROM_AREA_END                 ((EEPROM_TAddress)0x00107FFFUL)
#define EEPROM_AREA_END_INT             (0x00107FFFUL)
/* EEPROM area size (in bytes). */
#define EEPROM_AREA_SIZE                0x8000U
/* EEPROM area sector size: minimal erasable unit (in bytes). */
#define EEPROM_AREA_SECTOR_SIZE         0x0100U
/* TRUE if the component setting allows clear bits of already programmed flash memory location without destruction of the value in surrounding addresses by sector erase. */
#define EEPROM_ALLOW_CLEAR              (TRUE)
/* Size of programming phrase, i.e. number of bytes that must be programmed at once */
#define EEPROM_PROGRAMMING_PHRASE       (0x02U)

#define EEPROMStart EEPROM_AREA_START  /* [DEPRECATED] Start address of used EEPROM array */
#define EEPROMEnd EEPROM_AREA_END      /* [DEPRECATED] End address of used EEPROM array */

/* Flags parameter of OnError event can contain following error values (values may be OR-ed together) */
/* EEE Erase error */
#define EEPROM_ERASE_ERROR              (0x80U)
/* EEE Program error */
#define EEPROM_PROGRAM_ERROR            (0x40U)
/* EEE Protect violation error */
#define EEPROM_PROTECT_ERROR            (0x10U)
/* EEE error 1 */
#define EEPROM_ERR1_ERROR               (0x08U)
/* EEE error 0 */
#define EEPROM_ERR0_ERROR               (0x04U)
/* Double bit fault detect */
#define EEPROM_DOUBLE_FAULT             (0x02U)
/* Single bit fault detect */
#define EEPROM_SINGLE_FAULT             (0x01U)

byte EEPROM_SetByte(EEPROM_TAddress Addr,byte Data);
/*
** ===================================================================
**     Method      :  EEPROM_SetByte (component IntEEPROM)
**
**     Description :
**         This method writes a given byte to a specified address in
**         EEPROM. The method also sets address pointer for <SetActByte>
**         and <GetActByte> methods (applicable only if these methods
**         are enabled). The pointer is set to address passed as the
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**         Data            - Data to write
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_VALUE - verification of written data
**                           failed (read value does not match with
**                           written value) 
**                           - ERR_NOTAVAIL - other device-specific
**                           error 
**                           - ERR_RANGE - parameter Addr is out of range
** ===================================================================
*/

byte EEPROM_GetByte(EEPROM_TAddress Addr,byte *Data);
/*
** ===================================================================
**     Method      :  EEPROM_GetByte (component IntEEPROM)
**
**     Description :
**         This method reads a byte from a specified EEPROM address.
**         The method also sets address pointer for <SetActByte> and
**         <GetActByte> methods (applicable only if these methods are
**         enabled). The pointer is set to address passed as the
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - EEPROM Address
**       * Data            - A pointer to the returned 8-bit data
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_BUSY - device is busy 
**                           - ERR_RANGE - parameter Addr is out of range
** ===================================================================
*/

void EEPROM_Init(void);
/*
** ===================================================================
**     Method      :  EEPROM_Init (component IntEEPROM)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT

/* END EEPROM. */

#endif /* ifndef __EEPROM */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.05 [04.46]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
